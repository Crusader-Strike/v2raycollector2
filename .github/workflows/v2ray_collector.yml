# .github/workflows/v2ray_collector.yml
name: V2Ray Config Collector & Validator

on:
  workflow_dispatch:
  schedule:
    - cron: '5 * * * *'
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  collect-and-validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 3. Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 4. Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 5. Manually Install Xray-core
        run: |
          echo "Setting up temporary directory for Xray-core..."
          mkdir xray_temp
          
          echo "Downloading Xray-core..."
          XRAY_VERSION="1.8.10"
          ASSET_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/Xray-linux-64.zip"
          curl -L -o xray.zip "${ASSET_URL}"
          
          echo "Unzipping Xray-core into temporary directory..."
          # Use -d to specify the output directory. This prevents file conflicts.
          unzip -d xray_temp xray.zip
          
          echo "Installing Xray-core binary to /usr/local/bin..."
          # Move only the executable from the temp directory to a system path
          sudo mv xray_temp/xray /usr/local/bin/xray
          sudo chmod +x /usr/local/bin/xray
          
          echo "Cleaning up..."
          rm xray.zip
          rm -r xray_temp
          
          echo "Xray-core installed successfully:"
          xray --version

      - name: 6. Run the Collector and Validator Script
        run: |
          python v2ray_collector3.py

      - name: 7. Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all new/modified files. -A stages new files, modifications, and deletions.
          git add -A
          
          # Check if there are any changes to commit
          if ! git diff-index --quiet HEAD; then
            echo "Changes found. Attempting to commit and push..."
            
            # Pull the latest changes from the remote repository before pushing.
            # --rebase will apply our local commits on top of the remote changes,
            # which is cleaner than creating a merge commit.
            # We add a loop for retries in case of concurrent runs.
            
            for i in 1 2 3; do
              echo "Attempt #$i to pull and push..."
              git pull --rebase
              
              # The push might fail if another process pushed in the meantime.
              if git push; then
                echo "Push successful on attempt #$i."
                exit 0 # Exit successfully
              fi
              
              echo "Push failed on attempt #$i. Retrying after a short delay..."
              sleep 5 # Wait for 5 seconds before retrying
            done
            
            echo "::error::Failed to push changes after multiple attempts."
            exit 1 # Exit with an error code

          else
            echo "No changes detected. Nothing to commit."
          fi
